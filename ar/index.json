
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"","date":1669161600,"expirydate":-62135596800,"kind":"term","lang":"ar","lastmod":1669161600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"","tags":null,"title":"أحمد الحربي","type":"authors"},{"authors":["أحمد الحربي"],"categories":["دراسة","دكتوراه","حوسبة عالية الأداء"],"content":" فهرس المحتويات مقدمة جداول الهاش مخبأ ملكة الجمال السبر الخطي السبر الخطي تجريبيا تسريع السبر الخطي مع معدلات تعبئة مرتفعة حيلة أخيرة مقدمة الحالة لدينا كالتالي، في المرحلة الأولى نولد عدد كبير من العناصر شبه العشوائية، ونود أن نخزنها بمصفوفة. في المرحلة الثانية سيكون لدينا مولد ثاني لعناصر شبه عشوائية لنسميه، كل عنصر من المولد الثاني نود أن نتأكد هل يوجد عنصر مثله من المرحلة الأولى.\nآخر شهر تقريبا كنا نحاول كل ما يمكننا استخدامه من الذاكرة، نستطيع توليد عناصر عشوائية كما نريد وإن فقدنا أحدها نستطيع توليد عنصر جديد بدلا عنه.\nجداول الهاش جداول الهاش Hash Tables تتميز بإن البحث فيها تكلفته تقريبا O(1).\nباختصار مخل، لنضغ عنصر x داخل جدول هاش، نحسب دالة h (نختارها قبل) ويكون موقع العنصر داخل الجدول هو h(x). لنبحث إن x موجود نذهب مباشرة إلى الخانة رقم h(x) ونرى هل x موجود أو لا. مشكلتنا إن عدد العناصر ضخم وأي وأي تقليل بحجم الجدول نحتاجه. مثلا هاش الكوكو Cucko-Hash يتميز بإن البحث فيه يحتاج بالمتوسط لاستدعائين للذاكرة . المشكلة الأولى إن لو كان لدينا ن من العناصر في المرحلة الأولى سيكون حجم الجدول سيكون ٢ن. مشكلة ثانية هي إن الاستدعائين للذاكرة سيكونان لعنوانين عشوائين لذا سنتحمل عقوبة Cache-miss مرتين. مخبأ ملكة الجمال يترجم قوقل Cache Miss على إنه مخبأ ملكة الجمال، سنترجمها على إنها إخفاق الكاش.\nإخفاق الكاش يحصل عندما يسأل المعالج ذاكرة الكاش عن عنوان من الذاكرة، وعندما يبحث الكاش داخل العناصر المخزنة لا يجده، لذا يطلب الكاش هذا الجزء من الذاكرة من الرام. هذه العملية تستغرق وقت طويل. مثال: لو كان المعالج يجري عملية كل ثانية سينتظر ٦ دقائق حتى تصله المعلومة من الذاكرة.\nالصورة من كتاب Systems Performance: Enterprise and the Cloud by Brendan Gregg\nالسبر الخطي أحد أبسط جداول الهاش هو السبر الخطي Linear Probing، فكرته لنضع العنصر y داخل الجدول، نحسب h(y) ونذهب للخانة رقم h(y) (في الصورة افترضنا إن h(y) تساوي 8)\nإن كانت الخانة فارغة نضع العنصر فيها، ما عدا ذلك نذهب للخانة المجاورة ونكرر السؤال الخانة فارغة: ضغ العنصر، لا اذهب للخانة المجاورة وهكذا دواليك.\nالبحث مشابه لإضافة عنصر، مع اختلاف كل مرة ننتقل لخانة مجاورة نتأكد هل هي تساوي العنصر الذي نبحث عنه. نتوقف عندما نصل لخانة فارغة.\nعدد المرات اللتي نذهب للخانة المجاورة تعتمد على عدد العناصر الموجودة مقابل حجم المصفوفة، مثل لو كان عدد العناصر الموجودة يساوي عدد المصفوفة فسنزور عدد الخانات ما لانهاية من المرات. بشكل عام لو كان عدد خانات جدول الهاش هو n وعدد العناصر اللي أضفناها للجدول هي m فسنسمي m/n=α أو معدل التعبئة.\nهذه المسألة هي أول مسألة حقيقية (أو غير تافهة) حلها دونالد كنوث Donald Knuth. للاستزادة عن تاريخ المسألة اقرأ 50 years of Linear Probing Hashing\nالسبر الخطي تجريبيا كنوث حسب عدد المرات المتوقعة نظريا لو كانت الدالة h(x) عشوائية. أجرينا تجربة على معدلات تعبئة مختلفة\nalpha, nlookup, nprobes_lookup 0.50, 6780350 elm/sec, 1.5 probes/elm 0.63, 6456515 elm/sec, 3.15 probes/elm في السطر الأول معدل التعبئة هو نصف، بينما السطر الثاني معدل التعٰبئة ٠.٦٣.\nلاحظ هنا لنبحث عن عنصر واحد عدد القراءات في السطر الثاني أكثر من الضعف (٣.١٥ خانة نقرأها) لكن الأداء ما قل للنصف!\nهنا أنقذنا الكاش، لأنه عندما يقرأ عنصر من الذاكر سيقرأ عدد من العناصر المجاورة. للمزيد اقرأ عن خط الكاش cache-line. تسريع السبر الخطي مع معدلات تعبئة مرتفعة لنفرض إن لدينا سيرفر حجم الرام تقريبا٣٧٠ قيقابايت واستهدفنا معدل تعبئة ٩٠٪، ولنفرض إن العناصر موزعة تقريبا بالتساوي على الخانات. سيكون عدد الفراغات موزع تقريبا بالتساوي، وبين كل فراغين حوالي ٣٧ قيقابايت\nعندما نبحث عن عنصر غير موجود، وكنا غير محظوظين سنقرأ، في أسوأ الأحوال، تقريبا ٣٧ قيقابايت حتى نصل لخانة فارغة وننهي البحث.\nالأمور ليست بهذه السوداوية. لنرى عندما كنا نضع العناصر، كم نسبة العناصر اللتي احتاجت للتأكد من خانة واحدة عند وضعها، ونسبة العناصر اللتي احتاجت للتأكد من خانتين متجاورتين لوضعهما، إلخ.\nلاحظ من الرسم عدد العناصر التي تحتاج لزيارة خانات كثير عندما نريد إضافتها لجدول الهاش يقل في البداية بسرعة ثم يتباطأ.\nولو أردنا قيم أدق Pr(nprobes \u0026amp;lt;= 1) = 0.55 Pr(nprobes \u0026amp;lt;= 2) = 0.69 Pr(nprobes \u0026amp;lt;= 3) = 0.76 Pr(nprobes \u0026amp;lt;= 4) = 0.80 Pr(nprobes \u0026amp;lt;= 5) = 0.83 Pr(nprobes \u0026amp;lt;= 6) = 0.85 Pr(nprobes \u0026amp;lt;= 7) = 0.87 Pr(nprobes \u0026amp;lt;= 8) = 0.88 Pr(nprobes \u0026amp;lt;= 9) = 0.89 Pr(nprobes \u0026amp;lt;= 10) = 0.90 Pr(nprobes \u0026amp;lt;= 11) = 0.91 Pr(nprobes \u0026amp;lt;= 12) = 0.917 Pr(nprobes \u0026amp;lt;= 13) = 0.92 Pr(nprobes \u0026amp;lt;= 14) = 0.927 Pr(nprobes \u0026amp;lt;= 15) = 0.93 Pr(nprobes \u0026amp;lt;= 16) = 0.936 من السطر الأخير عندما كنا نستهدف معدل تعبئة ٩٠٪، تقريبا ٩٣٪ من العناصر لن يحتاج لأكثر من ١٦ قراءة لخانة مجاورة عند إضافته.\nلذا لو اضفنا هذه العناصر فقط لن نحتاج في البحث لأكثر من قراءة ١٦ خانة مجاورة، وحالفنا الحظ هنا لأن خط الكاش حجمه ٦٤ بايت (٥١٢ بت) لو كان حجم العنصر ٤ بايت (٣٢ بت) فقراءة خانة واحدة هي نفس تكلفة قراءة ١٦ خانة مجاورة.\nحيلة أخيرة نستطيع استخدام رقم الخانة للتخزين. مثلا لو كان لدينا العنصر ١٥٩٠، نستطيع تخزين ١٥ في الخانة رقم ٩٠ (على فرض إنها موجودة) ولاسترجاع القيمة نضع رقم الخانة بجانب القيمة الموجودة بالخانة.\nتفاصيل الطريقة بحالتنا سنتجاهله.\n","date":1669161600,"expirydate":-62135596800,"kind":"page","lang":"ar","lastmod":1669161600,"objectID":"9915d30402b37e3edba033d67bfc2775","permalink":"https://akaalharbi.github.io/ar/post/3-squeezing-all-possible-bits/","publishdate":"2022-11-23T00:00:00Z","relpermalink":"/ar/post/3-squeezing-all-possible-bits/","section":"post","summary":"كيف نملئ الذاكر ببيانات عشوائية سهل البحث فيها حتى آخر بت","tags":["حوسبة عالية الأداء"],"title":"استخدام كل ما يمكن من الذاكرة","type":"post"},{"authors":["أحمد الحربي"],"categories":["دراسة","دكتوراه"],"content":" فهرس المحتويات مقدمة جداول الهاش مخبأ ملكة الجمال السبر الخطي تجريبيا حيلة أخيرة مقدمة الحالة لدينا كالتالي، في المرحلة الأولى نولد عدد كبير من العناصر شبه العشوائية، ونود أن نخزنها بمصفوفة. في المرحلة الثانية سيكون لدينا مولد ثاني لعناصر شبه عشوائية لنسميه، كل عنصر من المولد الثاني نود أن نتأكد هل يوجد عنصر مثله من المرحلة الأولى.\nآخر شهر تقريبا كنا نحاول كل ما يمكننا استخدامه من الذاكرة، نستطيع توليد عناصر عشوائية كما نريد وإن فقدنا أحدها نستطيع توليد عنصر جديد بدلا عنه.\nجداول الهاش جداول الهاش Hash Tables تتميز بإن البحث فيها تكلفته تقريبا O(1).\nباختصار مخل، لنضغ عنصر x داخل جدول هاش، نحسب دالة h (نختارها قبل) ويكون موقع العنصر داخل الجدول هو h(x). لنبحث إن x موجود نذهب مباشرة إلى الخانة رقم h(x) ونرى هل x موجود أو لا. وهنا التعقيد الحسابي.\nمشكلتنا إن عدد العناصر ضخم وأي وأي تقليل بحجم الجدول نحتاجه. مثلا هاش الكوكو Cucko-Hash يتميز بإن البحث فيه يحتاج بالمتوسط لاستدعائين للذاكرة مرتين. المشكلة الأولى إن لو كان لدينا ن من العناصر في المرحلة الأولى سيكون حجم الجدول سيكون ٢ن. مشكلة ثانية هي إن الاستدعائين للذاكرة سيكونان لعنوانين عشوائين لذا سنتحمل عقوبة Cache-miss مرتين. مخبأ ملكة الجمال يترجم قوقل Cache Miss على إنه مخبأ ملكة الجمال، سنترجمها على إنها إخفاق الكاش.\nإخفاق الكاش يحصل عندما يسأل المعالج ذاكرة الكاش عن عنوان من الذاكرة، وعندما يبحث الكاش داخل العناصر المخزنة لا يجده، لذا يطلب الكاش هذا الجزء من الذاكرة من الرام. هذه العملية تستغرق وقت طويل. مثال: لو كان المعالج يجري عملية كل ثانية سينتظر ٦ دقائق حتى تصله المعلومة من الذاكرة.\nالصورة من كتاب Systems Performance: Enterprise and the Cloud by Brendan Gregg\nالسبر الخطي أحد أبسط جداول الهاش هو السبر الخطي Linear Probing، فكرته لنضع العنصر y داخل الجدول، نحسب h(y) ونذهب للخانة رقم h(y) (في الصورة افترضنا إن h(y) تساوي 8)\nإن كانت الخانة فارغة نضع العنصر فيها، ما عدا ذلك نذهب للخانة المجاورة ونكرر السؤال الخانة فارغة: ضغ العنصر، لا اذهب للخانة المجاورة وهكذا دواليك.\nالبحث مشابه لإضافة عنصر، مع اختلاف كل مرة ننتقل لخانة مجاورة نتأكد هل هي تساوي العنصر الذي نبحث عنه. نتوقف عندما نصل لخانة فارغة.\nعدد المرات اللتي نذهب للخانة المجاورة تعتمد على عدد العناصر الموجودة مقابل حجم المصفوفة، مثل لو كان عدد العناصر الموجودة يساوي عدد المصفوفة فسنزور عدد الخانات ما لانهاية من المرات. بشكل عام لو كان عدد خانات جدول الهاش هو n وعدد العناصر اللي أضفناها للجدول هي m فسنسمي m/n=α أو معدل التعبئة.\nهذه المسألة هي أول مسألة حقيقية (أو غير تافهة) حلها دونالد كنوث Donald Knuth. للاستزادة عن تاريخ المسألة اقرأ 50 years of Linear Probing Hashing\nالسبر الخطي تجريبيا كنوث حسب عدد المرات المتوقعة نظريا لو كانت الدالة h(x) عشوائية. أجرينا تجربة على معدلات تعبئة مختلفة\nalpha, nlookup, nprobes_lookup 0.50, 6780350 elm/sec, 1.5 probes/elm 0.63, 6456515 elm/sec, 3.15 probes/elm في السطر الأول معدل التعبئة هو نصف، بينما السطر الثاني معدل التعٰبئة ٠.٦٣.\nلاحظ هنا لنبحث عن عنصر واحد عدد القراءات في السطر الثاني أكثر من الضعف (٣.١٥ خانة نقرأها) لكن الأداء ما قل للنصف!\nهنا أنقذنا الكاش، لأنه عندما يقرأ عنصر من الذاكر سيقرأ عدد من العناصر المجاورة. للمزيد اقرأ عن خط الكاش cache-line. تسريع السبر الخطي مع معدلات تعبئة مرتفعة لنفرض إن لدينا سيرفر حجم الرام تقريبا٣٧٠ قيقابايت واستهدفنا معدل تعبئة ٩٠٪، ولنفرض إن العناصر موزعة تقريبا بالتساوي على الخانات. سيكون عدد الفراغات موزع تقريبا بالتساوي، وبين كل فراغين حوالي ٣٧ قيقابايت\nعندما نبحث عن عنصر غير موجود، وكنا غير محظوظين سنقرأ، في أسوأ الأحوال، تقريبا ٣٧ قيقابايت حتى نصل لخانة فارغة وننهي البحث.\nالأمور ليست بهذه السوداوية. لنرى عندما كنا نضع العناصر، كم نسبة العناصر اللتي احتاجت للتأكد من خانة واحدة عند وضعها، ونسبة العناصر اللتي احتاجت للتأكد من خانتين متجاورتين لوضعهما، إلخ.\nلاحظ من الرسم عدد العناصر التي تحتاج لزيارة خانات كثير عندما نريد إضافتها لجدول الهاش يقل في البداية بسرعة ثم يتباطأ.\nولو أردنا قيم أدق Pr(nprobes \u0026lt;= 1) = 0.55 Pr(nprobes \u0026lt;= 2) = 0.69 Pr(nprobes \u0026lt;= 3) = 0.76 Pr(nprobes \u0026lt;= 4) = 0.80 Pr(nprobes \u0026lt;= 5) = 0.83 Pr(nprobes \u0026lt;= 6) = 0.85 Pr(nprobes \u0026lt;= 7) = 0.87 Pr(nprobes \u0026lt;= 8) = 0.88 Pr(nprobes \u0026lt;= 9) = 0.89 Pr(nprobes \u0026lt;= 10) = 0.90 Pr(nprobes \u0026lt;= 11) = 0.91 Pr(nprobes \u0026lt;= 12) = 0.917 Pr(nprobes \u0026lt;= 13) = 0.92 Pr(nprobes \u0026lt;= 14) = 0.927 Pr(nprobes \u0026lt;= 15) = 0.93 Pr(nprobes \u0026lt;= 16) = 0.936 من السطر الأخير عندما كنا نستهدف معدل تعبئة ٩٠٪، تقريبا ٩٣٪ من العناصر لن يحتاج لأكثر من ١٦ قراءة لخانة مجاورة عند إضافته.\nلذا لو اضفنا هذه العناصر فقط لن نحتاج في البحث لأكثر من قراءة ١٦ خانة مجاورة، وحالفنا الحظ هنا لأن خط الكاش حجمه ٦٤ بايت (٥١٢ بت) لو كان حجم العنصر ٤ بايت (٣٢ بت) فقراءة خانة واحدة هي نفس تكلفة قراءة ١٦ خانة مجاورة.\nحيلة أخيرة نستطيع استخدام رقم الخانة للتخزين. مثلا لو كان لدينا العنصر ١٥٩٠، نستطيع تخزين ١٥ في الخانة رقم ٩٠ (على فرض إنها موجودة) ولاسترجاع القيمة نضع رقم الخانة بجانب القيمة الموجودة بالخانة.\nتفاصيل الطريقة بحالتنا سنتجاهله.\n","date":1665360000,"expirydate":-62135596800,"kind":"page","lang":"ar","lastmod":1665878400,"objectID":"b57b6ed7168f256fee54257264b98706","permalink":"https://akaalharbi.github.io/ar/post/first-month/","publishdate":"2022-10-10T00:00:00Z","relpermalink":"/ar/post/first-month/","section":"post","summary":"فهرس المحتويات مقدمة جداول الهاش مخبأ ملكة الجمال السبر الخطي تجريبيا حيلة أخيرة مقدمة الحالة لدينا كالتالي، في المرحلة الأولى نولد عدد كبير من العناصر شبه العشوائية، ونود أن نخزنها بمصفوفة.","tags":["قبول","دكتوراه","حوسبة عالية الأداء"],"title":"أول شهر من الدراسة","type":"post"},{"authors":["أحمد الحربي"],"categories":["دراسة","دكتوراه"],"content":" فهرس المحتويات مقدمة مقابلة قبول الدكتوراه موضوع الرسالة خلفية: قياس صعوبة الهجمات على التشفير نماذج أخرى الخطة لما قبل الدراسة مقدمة أنا طالب تخصصي رياضيات بالبكالوريوس والماجستير، وسأكمل دراسة دكتوراه بعلوم الحاسب بجامعة السوربون ابتداء من سبتمبر ٢٠٢٢.\nمقابلة قبول الدكتوراه خلال المراسلات للبحث عن قبول أبدى أحد الدكاترة(لاحقا مشرفي) وأرسل لي ورقة مع امتحان سيسألني عنه وحدد موعد للمقابلة عن طريق زوم zoom. في بداية المقابلة ناقش الحلول معي، ثم بدأ يسألني لم أنا مهتم بالعمل معه؟ وما هي خلفيتي؟ وعن المواضيع hاللي أنا مهتم بالعمل فيها؟ وهل تواصلت مع أشخاص آخرين؟ وفي إطار هذا السؤال بدأ يشرح عن مجموعات بحثية في أوروبا واقترح علي عدة أسماء أتواصل معهم. ومن ثم ذكر لي خلفيته وعن المسائل اللي مهتم بالعمل فيها وعن النتائج المهتم أن يراها خلال مدى ثلاث سنين. في نهاية المقابلة ذكر لي شفويا إنه مستعد لقبولي كطالب لديه\nموضوع الرسالة خلفية: قياس صعوبة الهجمات على التشفير في التشفير ليس هناك مقياس واضح للتعقيد الحسابي Complexity. لو استخدمنا ترميز Big-O لأصبحت صعوبة أغلب المسائل في التشفير متناظر كلها ثابتة O(1)، مثلا لكسر معيار التشفير المتقدم AES نحتاج على الأكثر $2^{256}$ تخمين وهو ما يندرج تحت تعريفO(1). النموذج المتبع هو إننا نعد كم مرة استدعينا دالة التشفير، ونرى ما إذا كانت الهجمة الجديدة عدد استدعاءاتها أقل من البحث العشوائي.\nمثال\nدالة التشفير AES-128 تستخذم مفتاح طوله 128-بت. لتشفير نص m بالمفتاح k سنكتب شيء مشابه ciphertext = AES_128(m, k) لو عرف االمهاجم المفتاح k سيعتبر إنه كسر التشفير بحالتنا هذه. لنفرض إن لدى المهاجم النص m، والنص المشفر ciphertext وسيخمن k. سيجرب مفتاح مفتاح، ومع كل مفتاح سيستدعي AES-128(m, guess) في حالتنا هذه سيحتاج بأسوأ الأحوال لتجربة 2 128 مفتاح. لو اكتشفنا طريقة لإيجاد k بعدد حسابات أقل من من هذا الرقم، ستعتبر هجمة. أين تكمن المشكلة في النموذج بالأعلى؟ هناك فرض ضمني إن تكلفة الذاكرة هي نفس تكلفة المعالج. أيضا بحسب هذا لو احتجنا إلى لقراءة 1 تيرابايت فإن سرعة قراءة أول بت هي نفس سرعة قراءة آخر بت. لنفرض إننا استطعنا تخزين مفتاح AES-128 داخل ذَرّة واحدة، وصففنا جميع الذرات التي استخدمناها على خط مستقيم. عندئذ قراءة آخر مفتاح سيحتاج مننا على الأقل تيراليون (عشرة أس 12) سنة. نماذج أخرى الذاكرة المكلفة Expensive Memory أثناء مسابقة نيست NIST لاختيار تشفير ممانع للحواسيب الكمية برز نموذج الذاكرة المكلفة Expensive Memory Model، باختصار وقت قراءة البت رقم n يتماشى مع n . حسب فهمي مشكلة هذا النموذج إنه لا يقابل بنية الحواسيب الموجودة، فهو يفرض ضمنيا إن لدينا عدة معالجات جميعها تشترك بنفس الذاكرة وسرعة الوصول للبت رقم n هي نفسها لجميع المعالجات. نموذج المساحة×بالزمن AT (موضوع الرسالة) ما نملكه حاليا عدة أجهزة، وتكلفة قراءة الذاكرة داخل كل جهاز أسرع من التواصل مع الأجهزة الأخرى. كيفية استخدام هذا النموذج في حساب تكلفة الهجمات هو لب العمل بالدكتوراه. إن كنت متحمس لمعرفة عن الفكرة بإمكانك قراءة الورقة Nice Attacks الخطة لما قبل الدراسة وصلني القبول الرسمي ببداية شهر مايو، ولدي تقريبا من ٣ إلى ٤ أشهر حتى بداية الدراسة. المجالات التي سأحاول دراستها: تعقيد التواصل Communication Complexity المستوى المطلوب: فكرة عامة عن المجال وعن طرق الحل المسائل اللتي يستهدفها المجال. لغة C++ المستوى المطلوب: تغطية أساسيات اللغة ومعرفة بعض مكونات المكتبة المعيارية سأكتب أكثر عن المواضيع بالأعلى بتدوينات منفصلة. ","date":1657497600,"expirydate":-62135596800,"kind":"page","lang":"ar","lastmod":1657497600,"objectID":"dfec29189588cfb7eb3e92095990cf68","permalink":"https://akaalharbi.github.io/ar/post/interview-and-palnning/","publishdate":"2022-07-11T00:00:00Z","relpermalink":"/ar/post/interview-and-palnning/","section":"post","summary":"كيف جرت مقابلة القبول، وما هو موضوع الرسالة؟، وما هي الخطة لما قبل الدراسة؟","tags":["قبول","دكتوراه","تشفير","تعقيد التواصل","حوسبة عالية الأداء"],"title":"مقابلة الدكتوراه والتجهيز لما قبل بدء الدراسة","type":"post"},{"authors":["أحمد الحربي"],"categories":["دراسة","دكتوراه"],"content":" فهرس المحتويات مقدمة مقابلة قبول الدكتوراه موضوع الرسالة خلفية: قياس صعوبة الهجمات على التشفير نماذج أخرى الخطة لما قبل الدراسة مقدمة أنا طالب تخصصي رياضيات بالبكالوريوس والماجستير، وسأكمل دراسة دكتوراه بعلوم الحاسب بجامعة السوربون ابتداء من سبتمبر ٢٠٢٢.\nمقابلة قبول الدكتوراه خلال المراسلات للبحث عن قبول أبدى أحد الدكاترة(لاحقا مشرفي) وأرسل لي ورقة مع امتحان سيسألني عنه وحدد موعد للمقابلة عن طريق زوم zoom. في بداية المقابلة ناقش الحلول معي، ثم بدأ يسألني لم أنا مهتم بالعمل معه؟ وما هي خلفيتي؟ وعن المواضيعا للي أنا مهتم بالعمل فيها؟ وهل تواصلت مع أشخاص آخرين؟ وفي إطار هذا السؤال بدأ يشرح عن مجموعات بحثية في أوروبا واقترح علي عدة أسماء أتواصل معهم. ومن ثم ذكر لي خلفيته وعن المسائل اللي مهتم بالعمل فيها وعن النتائج المهتم أن يراها خلال مدى ثلاث سنين. في نهاية المقابلة ذكر لي شفويا إنه مستعد لقبولي كطالب لديه\nموضوع الرسالة خلفية: قياس صعوبة الهجمات على التشفير في التشفير ليس هناك مقياس واضح للتعقيد الحسابي Complexity. لو استخدمنا ترميز Big-O لأصبحت صعوبة أغلب المسائل في التشفير متناظر كلها ثابتة O(1)، مثلا لكسر معيار التشفير المتقدم AES نحتاج على الأكثر $2^{256}$ تخمين وهو ما يندرج تحت تعريف O(1). النموذج المتبع هو إننا نعد كم مرة استدعينا دالة التشفير، ونرى ما إذا كانت الهجمة الجديدة عدد استدعاءاتها أقل من البحث العشوائي.\nمثال\nدالة التشفير AES-128 تستخذم مفتاح طوله 128-بت. لتشفير نص m بالمفتاح k سنكتب شيء مشابه ciphertext = AES_128(m, k) لو عرف االمهاجم المفتاح k سيعتبر إنه كسر التشفير بحالتنا هذه. لنفرض إن لدى المهاجم النص m، والنص المشفر ciphertext وسيخمن k. سيجرب مفتاح مفتاح، ومع كل مفتاح سيستدعي AES-128(m, guess) في حالتنا هذه سيحتاج بأسوأ الأحوال لتجربة $2^{128}$\nمفتاح. لو اكتشفنا طريقة لإيجاد k بعدد حسابات أقل من من هذا الرقم، ستعتبر هجمة.\nأين تكمن المشكلة في النموذج بالأعلى؟ هناك فرض ضمني إن تكلفة الذاكرة هي نفس تكلفة المعالج. أيضا بحسب هذا لو احتجنا إلى لقراءة 1 تيرابايت فإن سرعة قراءة أول بت هي نفس سرعة قراءة آخر بت. لنفرض إننا استطعنا تخزين مفتاح AES-128 داخل ذَرّة واحدة، وصففنا جميع الذرات التي استخدمناها على خط مستقيم. عندئذ قراءة آخر مفتاح سيحتاج مننا على الأقل تيراليون (عشرة أس 12) سنة. نماذج أخرى الذاكرة المكلفة Expensive Memory أثناء مسابقة نيست NIST لاختيار تشفير ممانع للحواسيب الكمية برز نموذج الذاكرة المكلفة Expensive Memory Model، باختصار وقت قراءة البت رقم n يتماشى مع $$\\sqrt{n}$$ حسب فهمي مشكلة هذا النموذج إنه لا يقابل بنية الحواسيب الموجودة، فهو يفرض ضمنيا إن لدينا عدة معالجات جميعها تشترك بنفس الذاكرة وسرعة الوصول للبت رقم n هي نفسها لجميع المعالجات. نموذج المساحة بالزمن AT (موضوع الرسالة) ما نملكه حاليا عدة أجهزة، وتكلفة قراءة الذاكرة داخل كل جهاز أسرع من التواصل مع الأجهزة الأخرى. أما النموذج الثالث سماه المساحةضرب الزمن AT الاسم مستوحى من مجتمع تصنيع الدوائر الإلكترونية.\nكيفية استخدام هذا النموذج في حساب تكلفة الهجمات هو لب العمل بالدكتوراه. إن كنت متحمس لمعرفة عن الفكرة بإمكانك قراءة الورقة Nice Attacks\nالخطة لما قبل الدراسة وصلني القبول الرسمي ببداية شهر مايو، ولدي تقريبا من ٣ إلى ٤ أشهر حتى بداية الدراسة. المجالات التي سأحاول دراستها:\nتعقيد التواصل Communication Complexity المستوى المطلوب: فكرة عامة عن المجال وعن طرق الحل المسائل اللتي يستهدفها المجال. الحوسبة بالتوازي Parallel Computing والحوسبة على أكثر من جهاز (واجهة تمرير الرسائل MPI) في البداية كنت أنوي تعلم البرمجة على كرت الشاشة GPU، لكن سألت المشرف وذكر لي إنه من الأفضل معرفة كيفية الحوسبة على أكثر من جهاز وستفيد بموضوع الرسالة. لغة C++ المستوى المطلوب: تغطية أساسيات اللغة ومعرفة بعض مكونات المكتبة المعيارية سأكتب أكثر عن المواضيع بالأعلى بتدوينات منفصلة. ","date":1655769600,"expirydate":-62135596800,"kind":"page","lang":"ar","lastmod":1655769600,"objectID":"718353aadcb4ef56a13a65b9b16e68ec","permalink":"https://akaalharbi.github.io/ar/post.old/interview-and-palnning/","publishdate":"2022-06-21T00:00:00Z","relpermalink":"/ar/post.old/interview-and-palnning/","section":"post.old","summary":"كيف جرت مقابلة القبول، وما هو موضوع الرسالة؟، وما هي الخطة لما قبل الدراسة؟","tags":["قبول","دكتوراه","تشفير","تعقيد التواصل","حوسبة عالية الأداء"],"title":"مقابلة الدكتوراه والتجهيز لما قبل بدء الدراسة","type":"post.old"},{"authors":["أحمد الحربي","美杨"],"categories":["Demo","教程"],"content":"Overview The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more The template is mobile first with a responsive design to ensure that your site looks stunning on every device. Get Started 👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Guide and Release Notes Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem Hugo Academic CLI: Automatically import publications from BibTeX Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files. Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ar","lastmod":1607817600,"objectID":"50d22ee845708530ab5dd20958bc02d8","permalink":"https://akaalharbi.github.io/ar/post.old/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ar/post.old/getting-started/","section":"post.old","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post.old"},{"authors":["أحمد الحربي"],"categories":[],"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic! Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post\u0026#39;s title date: 2019-09-01 # Put any other Academic metadata here... --- Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post’s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=. Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ar","lastmod":1567641600,"objectID":"f2f1c97d2d870dba2fc0b1e04612e88a","permalink":"https://akaalharbi.github.io/ar/post.old/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ar/post.old/jupyter/","section":"post.old","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post.old"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"ar","lastmod":-62135596800,"objectID":"6d99026b9e19e4fa43d5aadf147c7176","permalink":"https://akaalharbi.github.io/ar/contact/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ar/contact/","section":"","summary":"","tags":null,"title":"","type":"widget_page"}]