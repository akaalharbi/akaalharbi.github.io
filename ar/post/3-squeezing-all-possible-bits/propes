---
title: استخدام كل ما يمكن من الذاكرة
# subtitle: 

# Summary for listings and search engines
summary: 

# Link this post with a project
projects: []

# Date published
date: "2022-11-12T00:00:00Z"

# Date updated
lastmod: "2022-11-21T00:00:00Z"

# Is this an unpublished draft?
draft: true

# Show this page in the Featured widget?
featured: true

# Featured image
# Place an image named `featured.jpg/png` in this page's folder and customize its options here.
#image:
#   caption: 'شعار جامعة السوربون'
#   focal_point: ""
#   placement: 2
#   preview_only: false

authors:
- admin

tags:

- حوسبة عالية الأداء


categories:
- دراسة
- دكتوراه
- حوسبة عالية الأداء
---

<style>
h1, h2, h3, h4, h5, h6, h7
{
font-weight: bold; // it was normal
}
</style>
{{< toc >}}
## مقدمة


آخر شهر تقريبا كنا نحاول كل ما يمكننا استخدامه من الذاكرة، نستطيع توليد عناصر عشوائية كما نريد وإن فقدنا أحدها نستطيع توليد عنصر جديد بدلا عنه. سنخزن هذه العناصر ونود البحث بينها بأسرع طريقة ممكنة. 

جداول الهاش Hash Tables تتميز بإن البحث فيها تكلفته تقريبا O(1). لنضغ عنصر x داخل الجدول، نحسب دالة  h (نختارها قبل) ويكون موقع العنصر داخل الجدول هو h(x). لنبحث إن x موجود نذهب مباشرة إلى الخانة رقم h(x) ونرى هل x موجود أو لا.

 مشكلتنا إن عدد العناصر ضخم وأي وأي تقليل بحجم الجدول نحتاجه. مثلا هاش الكوكو Cucko-Hash يتميز بإن البحث فيه يحتاج بالمتوسط لاستدعاء عناصر من الذاكرة مرتين، مشكلته إن لو كان لدينا ن من العناصر حجم الجدول سيكون ٢ن. أيضا مشكلة ثانية هي إن الاستدعائين للذاكرة سيكونان لعنوانين عشوائين لذا سنتحمل عقوبة Cache-miss مرتين. 

### مخبأ ملكة الجمال
يترجم قوقل Cache Miss على إنه مخبأ ملكة الجمال، سنترجمها على إنها إخفاق الكاش.


إخفاق الكاش  يحصل عندما يسأل المعالج ذاكرة الكاش عن عنوان من الذاكرة، وعندما يبحث الكاش داخل العناصر المخزنة لا تجده، لذا يطلب الكاش هذا الجزء من الذاكرة من الرام. هذه العملية تستغرق وقت طويل، مثل لو كان المعالج يجري عملية كل ثانية سينتظر ٦ دقائق حتى تصله المعلومة من الذاكرة.


### السبر الخطي

أحد أبسط جداول هو السبر الخطي Linear Probing، فكرته لنضع العنصر o داخل الجدول، نحسب h(o) ونذهب للخانة رقم h(o)  (في الصورة افترضنا إن h(o) تساوي 8)

إن كان الخانة فارغة نضع العنصر فيها، ما عدا ذلك نذهب للخانة المجاورة ونكرر السؤال الخانة فارغة: ضغ العنصر، لا اذهب للخانة المجاورة وهكذا دواليك.

عدد المرات اللتي نذهب للخانة المجاورة سنسميها k. 

البحث مشابه لإضافة عنصر، مع اختلاف كل مرة ننتقل لخانة مجاورة نتأكد هل هي تساوي العنصر الذي نبحث عنه. نتوقف عندما نصل لخانة فارغة.




### تكلفة السبر الخطي نظريا

أول خوارزمية حللها دونالد كنوث Donald Knuth هي السبر الخطي.

ملخص التكلفة هي لو كان عدد خانات جدول الهاش هو n وعدد العناصر اللي أضفناها للجدول هي m فسنسمي m/n=α أو معدل التعبئة.

ملخص حسابات كنوث هي:
لو كنا نبحث عن عنصر x مع العلم إنه يوجد داخل الجدول ستكون عدد المرات المتوقعة اللي نذهب لخانة مجاورة هو:


بينما لو كنا نبحث عن عنصر x مع العلم بأنه لم يتم إضافته للجدول سنحتاج لقراءة عدد من الخانات تقريبا يساوي:


لو تلاحظ لو كان α=1/2 (أي نصف خانات الجدول فارغة) سنحتاج بالمتوسط لقراءة خانتين متجاورة



### السبر الخطي تجريبيا

أجرينا تجربة على معدلات تعبئة مختلفة

مثلا هنا لو كان معدل التعبئة


لنقارن بين معدل التعبئة 0.5 و 

لاحظ هنا لنبحث عن عنصر واحد عدد القراءات أكثر من الضعف لكن الأداء ما قل للنصف!

هنا أنقذنا الكاش، لأنه عندما يقرأ عنصر من الذاكر سيقرأ عدد من العناصر المجاورة. للمزيد اقرأ عن خط الكاش cache-line. 


### تسريع السبر الخطي مع معدلات تعبئة مرتفعة
لنفرض إن لدينا سيرفر حجم الرام تقريبا٣٧٠ قيقابايت، لو استهدفنا معدل تعبئة ٩٠٪، لنفرض أننا قررنا أن نبحث عن عنصر غير موجود. 

على فرض إن العناصر موزعة عشوائيا، عندما نبحث عن عنصر غير موجود سنقرأ في المتوسط تقريبا ٣٧ قيقابايت حتى نصل لخانة 
فارغة وننهي البحث.

بما إن لدينا الحرية لنضع عنصر مولد عشوائيا أو تجاهله، بإمكاننا وضع العناصر التي تحتاج على الأكثر r قراءة. وعند البحث عن عنصر سنكتفي بقراءة r من العناصر، إن لم نجد العنصر ضمن r من القراءات  فإننا العنصر بالتأكيد غير موجود.



لو تكتلت العناصر بجانب بعضها 



الصورة من كتاب Systems Performance: Enterprise and the Cloud by Brendan Gregg



 بشكل عام لدينا جدول هاش Hash Table وسنستخدم السبر الخطي Linear Probing. 





